import React, { ChangeEventHandler } from 'react';
import { SwitchProps } from '@radix-ui/react-switch';
import { RegisterOptions } from 'react-hook-form';
import { IconType } from 'react-icons';
export declare type ErrorMessage = {
    type: 'error';
    message: string;
};
export declare type WarningMessage = {
    type: 'warning';
    message: string;
};
export declare type SuccessMessage = {
    type: 'success';
    message: string;
};
export declare type PrimitiveWrapper = {
    label?: string;
    helperText?: string;
    info?: string;
};
export declare type PrimitiveElement = {
    id: string;
    warning?: WarningMessage;
    error?: ErrorMessage;
    success?: SuccessMessage;
    className?: string;
    disabled?: boolean;
    hidden?: boolean;
    loading?: boolean;
};
export declare type PrimitiveSizable = {
    long?: boolean;
    address?: boolean;
    full?: boolean;
};
export declare type PrimitiveAddons = {
    rightAddon?: React.ReactNode;
};
export declare type HasRules = {
    rules?: RegisterOptions;
};
declare type FieldWrapper = PrimitiveWrapper & PrimitiveElement & PrimitiveSizable & PrimitiveAddons;
export declare type Buildable<T> = T & FieldWrapper & HasRules;
export declare type Field = {
    placeholder?: string;
    disabledPlaceholder?: boolean;
    defaultValue?: string;
    icon?: IconType;
    number?: boolean;
    address?: boolean;
    long?: boolean;
    full?: boolean;
} & PrimitiveElement;
export declare type OptionType = {
    name: string;
    value: string | number;
    key?: string;
};
export declare type SelectProps = {
    defaultValue?: string;
    value?: string;
    onChange?: ChangeEventHandler<HTMLSelectElement>;
    options: OptionType[];
    containerClassName?: string;
    long?: boolean;
    full?: boolean;
    placeholder?: string;
} & PrimitiveElement & PrimitiveWrapper;
export declare type InputSelectProps = Field & SelectProps & {
    selectId: string;
    selectPlaceholder?: string;
    selectDefault?: string;
};
export declare type ConditionLabel = {
    on: string;
    off: string;
};
export declare type SwitchComponentProps = SwitchProps & {
    fieldLabel: string | ConditionLabel;
    id: string;
    className?: string;
    disabled?: boolean;
};
export declare type Switchable = {
    switches: SwitchComponentProps[];
};
export declare type FileInputProps = Field & {
    multiple?: boolean;
    accept?: string;
    onChange?: React.ChangeEventHandler<HTMLInputElement> | undefined;
    className?: string;
};
export {};
