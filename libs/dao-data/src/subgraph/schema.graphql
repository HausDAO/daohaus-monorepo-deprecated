"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity
is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type _Block_ {
  """The hash of the block"""
  hash: Bytes

  """The block number"""
  number: Int!

  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!

  """The deployment ID"""
  deployment: String!

  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow

  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

scalar BigDecimal

scalar BigInt

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

input BlockChangedFilter {
  number_gte: Int!
}

scalar Bytes

type Dao {
  """unique identifier and primary key of the entity"""
  id: ID!

  """timestamp of the block when the dao was summoned"""
  createdAt: BigInt!

  """address that created the dao"""
  createdBy: Bytes!

  """transaction hash of the dao contract deployment"""
  txHash: Bytes!

  """contract address of the loot erc20 token"""
  lootAddress: Bytes!

  """contract address of the shares erc20 token"""
  sharesAddress: Bytes!

  """contract address of the gnosis safe treasury"""
  safeAddress: Bytes!

  """indicates if loot transferability is on/off"""
  lootPaused: Boolean!

  """indicates if shares transferability is on/off"""
  sharesPaused: Boolean!

  """length in seconds of the current grace period"""
  gracePeriod: BigInt!

  """length in seconds of the current voting period"""
  votingPeriod: BigInt!

  """length in seconds of the current voting period and grace period"""
  votingPlusGraceDuration: BigInt!

  """amount of network token required as tribute to submit a proposal"""
  proposalOffering: BigInt!

  """minimum % of shares that must vote yes for it to pass"""
  quorumPercent: BigInt!

  """amount of shares needed to automatically sponsor a proposal"""
  sponsorThreshold: BigInt!

  """
  auto-fails a proposal if more than (1- minRetentionPercent) * total shares exit before processing
  """
  minRetentionPercent: BigInt!

  """name of the erc20 shares token"""
  shareTokenName: String

  """symbol of the erc20 shares token"""
  shareTokenSymbol: String

  """name of the erc20 loot token"""
  lootTokenName: String

  """symbol of the erc20 loot token"""
  lootTokenSymbol: String

  """total circulating shares tokens"""
  totalShares: BigInt!

  """total circulating loot tokens"""
  totalLoot: BigInt!

  """ID of the last sponsored proposal"""
  latestSponsoredProposalId: BigInt!

  """count of proposal submitted"""
  proposalCount: BigInt!

  """count of share or loot holding members"""
  activeMemberCount: BigInt!

  """name of the DAO"""
  name: String

  """was Dao summoned by an existing safe or did it create a new safe."""
  existingSafe: Boolean!

  """proposals scoped to this dao"""
  proposals(skip: Int = 0, first: Int = 100, orderBy: Proposal_orderBy, orderDirection: OrderDirection, where: Proposal_filter): [Proposal!]

  """members scoped to this dao"""
  members(skip: Int = 0, first: Int = 100, orderBy: Member_orderBy, orderDirection: OrderDirection, where: Member_filter): [Member!]!

  """rage quits scoped to this dao"""
  rageQuits(skip: Int = 0, first: Int = 100, orderBy: RageQuit_orderBy, orderDirection: OrderDirection, where: RageQuit_filter): [RageQuit!]

  """shaman scoped to this dao"""
  shaman(skip: Int = 0, first: Int = 100, orderBy: Shaman_orderBy, orderDirection: OrderDirection, where: Shaman_filter): [Shaman!]
  records(skip: Int = 0, first: Int = 100, orderBy: Record_orderBy, orderDirection: OrderDirection, where: Record_filter): [Record!]
  eventTransactions: EventTransaction
}

input Dao_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  createdBy: Bytes
  createdBy_not: Bytes
  createdBy_in: [Bytes!]
  createdBy_not_in: [Bytes!]
  createdBy_contains: Bytes
  createdBy_not_contains: Bytes
  txHash: Bytes
  txHash_not: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  lootAddress: Bytes
  lootAddress_not: Bytes
  lootAddress_in: [Bytes!]
  lootAddress_not_in: [Bytes!]
  lootAddress_contains: Bytes
  lootAddress_not_contains: Bytes
  sharesAddress: Bytes
  sharesAddress_not: Bytes
  sharesAddress_in: [Bytes!]
  sharesAddress_not_in: [Bytes!]
  sharesAddress_contains: Bytes
  sharesAddress_not_contains: Bytes
  safeAddress: Bytes
  safeAddress_not: Bytes
  safeAddress_in: [Bytes!]
  safeAddress_not_in: [Bytes!]
  safeAddress_contains: Bytes
  safeAddress_not_contains: Bytes
  lootPaused: Boolean
  lootPaused_not: Boolean
  lootPaused_in: [Boolean!]
  lootPaused_not_in: [Boolean!]
  sharesPaused: Boolean
  sharesPaused_not: Boolean
  sharesPaused_in: [Boolean!]
  sharesPaused_not_in: [Boolean!]
  gracePeriod: BigInt
  gracePeriod_not: BigInt
  gracePeriod_gt: BigInt
  gracePeriod_lt: BigInt
  gracePeriod_gte: BigInt
  gracePeriod_lte: BigInt
  gracePeriod_in: [BigInt!]
  gracePeriod_not_in: [BigInt!]
  votingPeriod: BigInt
  votingPeriod_not: BigInt
  votingPeriod_gt: BigInt
  votingPeriod_lt: BigInt
  votingPeriod_gte: BigInt
  votingPeriod_lte: BigInt
  votingPeriod_in: [BigInt!]
  votingPeriod_not_in: [BigInt!]
  votingPlusGraceDuration: BigInt
  votingPlusGraceDuration_not: BigInt
  votingPlusGraceDuration_gt: BigInt
  votingPlusGraceDuration_lt: BigInt
  votingPlusGraceDuration_gte: BigInt
  votingPlusGraceDuration_lte: BigInt
  votingPlusGraceDuration_in: [BigInt!]
  votingPlusGraceDuration_not_in: [BigInt!]
  proposalOffering: BigInt
  proposalOffering_not: BigInt
  proposalOffering_gt: BigInt
  proposalOffering_lt: BigInt
  proposalOffering_gte: BigInt
  proposalOffering_lte: BigInt
  proposalOffering_in: [BigInt!]
  proposalOffering_not_in: [BigInt!]
  quorumPercent: BigInt
  quorumPercent_not: BigInt
  quorumPercent_gt: BigInt
  quorumPercent_lt: BigInt
  quorumPercent_gte: BigInt
  quorumPercent_lte: BigInt
  quorumPercent_in: [BigInt!]
  quorumPercent_not_in: [BigInt!]
  sponsorThreshold: BigInt
  sponsorThreshold_not: BigInt
  sponsorThreshold_gt: BigInt
  sponsorThreshold_lt: BigInt
  sponsorThreshold_gte: BigInt
  sponsorThreshold_lte: BigInt
  sponsorThreshold_in: [BigInt!]
  sponsorThreshold_not_in: [BigInt!]
  minRetentionPercent: BigInt
  minRetentionPercent_not: BigInt
  minRetentionPercent_gt: BigInt
  minRetentionPercent_lt: BigInt
  minRetentionPercent_gte: BigInt
  minRetentionPercent_lte: BigInt
  minRetentionPercent_in: [BigInt!]
  minRetentionPercent_not_in: [BigInt!]
  shareTokenName: String
  shareTokenName_not: String
  shareTokenName_gt: String
  shareTokenName_lt: String
  shareTokenName_gte: String
  shareTokenName_lte: String
  shareTokenName_in: [String!]
  shareTokenName_not_in: [String!]
  shareTokenName_contains: String
  shareTokenName_contains_nocase: String
  shareTokenName_not_contains: String
  shareTokenName_not_contains_nocase: String
  shareTokenName_starts_with: String
  shareTokenName_starts_with_nocase: String
  shareTokenName_not_starts_with: String
  shareTokenName_not_starts_with_nocase: String
  shareTokenName_ends_with: String
  shareTokenName_ends_with_nocase: String
  shareTokenName_not_ends_with: String
  shareTokenName_not_ends_with_nocase: String
  shareTokenSymbol: String
  shareTokenSymbol_not: String
  shareTokenSymbol_gt: String
  shareTokenSymbol_lt: String
  shareTokenSymbol_gte: String
  shareTokenSymbol_lte: String
  shareTokenSymbol_in: [String!]
  shareTokenSymbol_not_in: [String!]
  shareTokenSymbol_contains: String
  shareTokenSymbol_contains_nocase: String
  shareTokenSymbol_not_contains: String
  shareTokenSymbol_not_contains_nocase: String
  shareTokenSymbol_starts_with: String
  shareTokenSymbol_starts_with_nocase: String
  shareTokenSymbol_not_starts_with: String
  shareTokenSymbol_not_starts_with_nocase: String
  shareTokenSymbol_ends_with: String
  shareTokenSymbol_ends_with_nocase: String
  shareTokenSymbol_not_ends_with: String
  shareTokenSymbol_not_ends_with_nocase: String
  lootTokenName: String
  lootTokenName_not: String
  lootTokenName_gt: String
  lootTokenName_lt: String
  lootTokenName_gte: String
  lootTokenName_lte: String
  lootTokenName_in: [String!]
  lootTokenName_not_in: [String!]
  lootTokenName_contains: String
  lootTokenName_contains_nocase: String
  lootTokenName_not_contains: String
  lootTokenName_not_contains_nocase: String
  lootTokenName_starts_with: String
  lootTokenName_starts_with_nocase: String
  lootTokenName_not_starts_with: String
  lootTokenName_not_starts_with_nocase: String
  lootTokenName_ends_with: String
  lootTokenName_ends_with_nocase: String
  lootTokenName_not_ends_with: String
  lootTokenName_not_ends_with_nocase: String
  lootTokenSymbol: String
  lootTokenSymbol_not: String
  lootTokenSymbol_gt: String
  lootTokenSymbol_lt: String
  lootTokenSymbol_gte: String
  lootTokenSymbol_lte: String
  lootTokenSymbol_in: [String!]
  lootTokenSymbol_not_in: [String!]
  lootTokenSymbol_contains: String
  lootTokenSymbol_contains_nocase: String
  lootTokenSymbol_not_contains: String
  lootTokenSymbol_not_contains_nocase: String
  lootTokenSymbol_starts_with: String
  lootTokenSymbol_starts_with_nocase: String
  lootTokenSymbol_not_starts_with: String
  lootTokenSymbol_not_starts_with_nocase: String
  lootTokenSymbol_ends_with: String
  lootTokenSymbol_ends_with_nocase: String
  lootTokenSymbol_not_ends_with: String
  lootTokenSymbol_not_ends_with_nocase: String
  totalShares: BigInt
  totalShares_not: BigInt
  totalShares_gt: BigInt
  totalShares_lt: BigInt
  totalShares_gte: BigInt
  totalShares_lte: BigInt
  totalShares_in: [BigInt!]
  totalShares_not_in: [BigInt!]
  totalLoot: BigInt
  totalLoot_not: BigInt
  totalLoot_gt: BigInt
  totalLoot_lt: BigInt
  totalLoot_gte: BigInt
  totalLoot_lte: BigInt
  totalLoot_in: [BigInt!]
  totalLoot_not_in: [BigInt!]
  latestSponsoredProposalId: BigInt
  latestSponsoredProposalId_not: BigInt
  latestSponsoredProposalId_gt: BigInt
  latestSponsoredProposalId_lt: BigInt
  latestSponsoredProposalId_gte: BigInt
  latestSponsoredProposalId_lte: BigInt
  latestSponsoredProposalId_in: [BigInt!]
  latestSponsoredProposalId_not_in: [BigInt!]
  proposalCount: BigInt
  proposalCount_not: BigInt
  proposalCount_gt: BigInt
  proposalCount_lt: BigInt
  proposalCount_gte: BigInt
  proposalCount_lte: BigInt
  proposalCount_in: [BigInt!]
  proposalCount_not_in: [BigInt!]
  activeMemberCount: BigInt
  activeMemberCount_not: BigInt
  activeMemberCount_gt: BigInt
  activeMemberCount_lt: BigInt
  activeMemberCount_gte: BigInt
  activeMemberCount_lte: BigInt
  activeMemberCount_in: [BigInt!]
  activeMemberCount_not_in: [BigInt!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  existingSafe: Boolean
  existingSafe_not: Boolean
  existingSafe_in: [Boolean!]
  existingSafe_not_in: [Boolean!]
  proposals_: Proposal_filter
  members: [String!]
  members_not: [String!]
  members_contains: [String!]
  members_contains_nocase: [String!]
  members_not_contains: [String!]
  members_not_contains_nocase: [String!]
  members_: Member_filter
  rageQuits_: RageQuit_filter
  shaman_: Shaman_filter
  records_: Record_filter
  eventTransactions_: EventTransaction_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Dao_orderBy {
  id
  createdAt
  createdBy
  txHash
  lootAddress
  sharesAddress
  safeAddress
  lootPaused
  sharesPaused
  gracePeriod
  votingPeriod
  votingPlusGraceDuration
  proposalOffering
  quorumPercent
  sponsorThreshold
  minRetentionPercent
  shareTokenName
  shareTokenSymbol
  lootTokenName
  lootTokenSymbol
  totalShares
  totalLoot
  latestSponsoredProposalId
  proposalCount
  activeMemberCount
  name
  existingSafe
  proposals
  members
  rageQuits
  shaman
  records
  eventTransactions
}

type EventTransaction {
  """unique identifier and primary key of the entity"""
  id: ID!

  """block timestamp of the transaction"""
  createdAt: BigInt!

  """related DAO"""
  dao: Dao
  daoAddress: Bytes
}

input EventTransaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  dao: String
  dao_not: String
  dao_gt: String
  dao_lt: String
  dao_gte: String
  dao_lte: String
  dao_in: [String!]
  dao_not_in: [String!]
  dao_contains: String
  dao_contains_nocase: String
  dao_not_contains: String
  dao_not_contains_nocase: String
  dao_starts_with: String
  dao_starts_with_nocase: String
  dao_not_starts_with: String
  dao_not_starts_with_nocase: String
  dao_ends_with: String
  dao_ends_with_nocase: String
  dao_not_ends_with: String
  dao_not_ends_with_nocase: String
  dao_: Dao_filter
  daoAddress: Bytes
  daoAddress_not: Bytes
  daoAddress_in: [Bytes!]
  daoAddress_not_in: [Bytes!]
  daoAddress_contains: Bytes
  daoAddress_not_contains: Bytes

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum EventTransaction_orderBy {
  id
  createdAt
  dao
  daoAddress
}

type Member {
  """unique identifier and primary key of the entity"""
  id: ID!

  """
  block timestamp when the member entity was created (when the address first recieved shares or loot)
  """
  createdAt: BigInt!

  """transaction where the member was created"""
  txHash: Bytes!

  """related dao"""
  dao: Dao!

  """address of the member"""
  memberAddress: Bytes!

  """current shares held by the member"""
  shares: BigInt!

  """current loot held by the member"""
  loot: BigInt!

  """total shares, loot and delegate shares, if 0 the member is inactive"""
  sharesLootDelegateShares: BigInt!

  """address the member is delegating to"""
  delegatingTo: Bytes!

  """subgraph id of member the address is delegating to"""
  delegatingToMember: Member

  """the transaction hash when the delegate was last updated"""
  lastDelegateUpdateTxHash: Bytes

  """
  total amount of shares this address votes with (thier own plus delegated shares)
  """
  delegateShares: BigInt!

  """members this member is delegating too"""
  delegateOf(skip: Int = 0, first: Int = 100, orderBy: Member_orderBy, orderDirection: OrderDirection, where: Member_filter): [Member!]

  """related votes"""
  delegateOfCount: BigInt!
  votes(skip: Int = 0, first: Int = 100, orderBy: Vote_orderBy, orderDirection: OrderDirection, where: Vote_filter): [Vote!]
}

input Member_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  txHash: Bytes
  txHash_not: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  dao: String
  dao_not: String
  dao_gt: String
  dao_lt: String
  dao_gte: String
  dao_lte: String
  dao_in: [String!]
  dao_not_in: [String!]
  dao_contains: String
  dao_contains_nocase: String
  dao_not_contains: String
  dao_not_contains_nocase: String
  dao_starts_with: String
  dao_starts_with_nocase: String
  dao_not_starts_with: String
  dao_not_starts_with_nocase: String
  dao_ends_with: String
  dao_ends_with_nocase: String
  dao_not_ends_with: String
  dao_not_ends_with_nocase: String
  dao_: Dao_filter
  memberAddress: Bytes
  memberAddress_not: Bytes
  memberAddress_in: [Bytes!]
  memberAddress_not_in: [Bytes!]
  memberAddress_contains: Bytes
  memberAddress_not_contains: Bytes
  shares: BigInt
  shares_not: BigInt
  shares_gt: BigInt
  shares_lt: BigInt
  shares_gte: BigInt
  shares_lte: BigInt
  shares_in: [BigInt!]
  shares_not_in: [BigInt!]
  loot: BigInt
  loot_not: BigInt
  loot_gt: BigInt
  loot_lt: BigInt
  loot_gte: BigInt
  loot_lte: BigInt
  loot_in: [BigInt!]
  loot_not_in: [BigInt!]
  sharesLootDelegateShares: BigInt
  sharesLootDelegateShares_not: BigInt
  sharesLootDelegateShares_gt: BigInt
  sharesLootDelegateShares_lt: BigInt
  sharesLootDelegateShares_gte: BigInt
  sharesLootDelegateShares_lte: BigInt
  sharesLootDelegateShares_in: [BigInt!]
  sharesLootDelegateShares_not_in: [BigInt!]
  delegatingTo: Bytes
  delegatingTo_not: Bytes
  delegatingTo_in: [Bytes!]
  delegatingTo_not_in: [Bytes!]
  delegatingTo_contains: Bytes
  delegatingTo_not_contains: Bytes
  delegatingToMember: String
  delegatingToMember_not: String
  delegatingToMember_gt: String
  delegatingToMember_lt: String
  delegatingToMember_gte: String
  delegatingToMember_lte: String
  delegatingToMember_in: [String!]
  delegatingToMember_not_in: [String!]
  delegatingToMember_contains: String
  delegatingToMember_contains_nocase: String
  delegatingToMember_not_contains: String
  delegatingToMember_not_contains_nocase: String
  delegatingToMember_starts_with: String
  delegatingToMember_starts_with_nocase: String
  delegatingToMember_not_starts_with: String
  delegatingToMember_not_starts_with_nocase: String
  delegatingToMember_ends_with: String
  delegatingToMember_ends_with_nocase: String
  delegatingToMember_not_ends_with: String
  delegatingToMember_not_ends_with_nocase: String
  delegatingToMember_: Member_filter
  lastDelegateUpdateTxHash: Bytes
  lastDelegateUpdateTxHash_not: Bytes
  lastDelegateUpdateTxHash_in: [Bytes!]
  lastDelegateUpdateTxHash_not_in: [Bytes!]
  lastDelegateUpdateTxHash_contains: Bytes
  lastDelegateUpdateTxHash_not_contains: Bytes
  delegateShares: BigInt
  delegateShares_not: BigInt
  delegateShares_gt: BigInt
  delegateShares_lt: BigInt
  delegateShares_gte: BigInt
  delegateShares_lte: BigInt
  delegateShares_in: [BigInt!]
  delegateShares_not_in: [BigInt!]
  delegateOf_: Member_filter
  delegateOfCount: BigInt
  delegateOfCount_not: BigInt
  delegateOfCount_gt: BigInt
  delegateOfCount_lt: BigInt
  delegateOfCount_gte: BigInt
  delegateOfCount_lte: BigInt
  delegateOfCount_in: [BigInt!]
  delegateOfCount_not_in: [BigInt!]
  votes_: Vote_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Member_orderBy {
  id
  createdAt
  txHash
  dao
  memberAddress
  shares
  loot
  sharesLootDelegateShares
  delegatingTo
  delegatingToMember
  lastDelegateUpdateTxHash
  delegateShares
  delegateOf
  delegateOfCount
  votes
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Proposal {
  """unique identifier and primary key of the entity"""
  id: ID!

  """block timestamp when the proposal was submitted"""
  createdAt: BigInt!

  """address that submitted the proposal"""
  createdBy: Bytes!

  """member entity of proposer if applicable"""
  proposerMembership: Member

  """related DAO entity"""
  dao: Dao!

  """id of the proposal"""
  proposalId: BigInt!

  """id of the previous proposal, set at sponsorship"""
  prevProposalId: BigInt!

  """transaction hash of the proposal"""
  txHash: Bytes!

  """
  hash of raw transaction data that will be executed if the proposal passes
  """
  proposalDataHash: Bytes!

  """raw transaction data that will be executed if the proposal passes"""
  proposalData: Bytes!

  """duration of the voting period for this proposal in seconds"""
  votingPeriod: BigInt!

  """unix timestamp of when the voting period starts"""
  votingStarts: BigInt!

  """unix timestamp of when the voting period ends"""
  votingEnds: BigInt!

  """duration in seconds of the grace period for this proposal in seconds"""
  gracePeriod: BigInt!

  """
  duration in seconds of the grace and voting periods for this proposal in seconds
  """
  votingPlusGraceDuration: BigInt!

  """unix timestamp of when the grace period ends"""
  graceEnds: BigInt!

  """
  unix timestamp after which proposal should be considered invalid and skipped
  """
  expiration: BigInt!

  """
  proposal expiration time or if there is no expiration this will be a huge number to aid in querying unexpired proposals
  """
  expirationQueryField: BigInt!

  """estimated gas needed to execute the proposal actions"""
  actionGasEstimate: BigInt!

  """string with human readable description of the proposal"""
  details: String!

  """indicates if the proposal was automatically sponsored"""
  selfSponsor: Boolean!

  """indicates if the proposal is sponsored"""
  sponsored: Boolean!

  """address that sponsored the proposal"""
  sponsor: Bytes

  """member entity of the sponsor"""
  sponsorMembership: Member

  """transaction hash of the proposal sponsor"""
  sponsorTxHash: Bytes

  """unix timestamp of when the proposal was sponsored"""
  sponsorTxAt: BigInt

  """indicates if the proposal is cancelled"""
  cancelled: Boolean!

  """transaction hash of the cancelled proposal"""
  cancelledTxHash: Bytes

  """unix timestamp of when the proposal was cancelled"""
  cancelledTxAt: BigInt

  """the address that cancelled the proposal"""
  cancelledBy: Bytes

  """indicates if the proposal is processed"""
  processed: Boolean!

  """transaction hash of processing the proposal"""
  processTxHash: Bytes

  """the unix timestamp of when the proposal was processed"""
  processTxAt: BigInt

  """address that processed the proposal"""
  processedBy: Bytes

  """indicates if the proposal is processed"""
  actionFailed: Boolean!

  """indicates if the proposal passed"""
  passed: Boolean!

  """
  amount of native token that was provided as tribute when the proposal was submitted
  """
  proposalOffering: BigInt!

  """number of current yes votes"""
  yesVotes: BigInt!

  """number of current no votes"""
  noVotes: BigInt!

  """amount of current shares that have voted yes"""
  yesBalance: BigInt!

  """amount of current shares that have voted no"""
  noBalance: BigInt!

  """is currently paasing quorum and has more yes votes than no votes"""
  currentlyPassing: Boolean!

  """highest share+loot count during any individual yes vote"""
  maxTotalSharesAndLootAtYesVote: BigInt!

  """
  The following tribute fields will only have values if the proposal was submitted through the trbute minion contract. 
   token address in tribute proposals.
  
  """
  tributeToken: Bytes

  """amount of tribute token offered"""
  tributeOffered: BigInt

  """symbol of the tribute token"""
  tributeTokenSymbol: String

  """decimal places of the tribute token"""
  tributeTokenDecimals: BigInt

  """applicant submitting the tribute proposal"""
  tributeEscrowRecipient: Bytes

  """proposal type derived from the details field"""
  proposalType: String!

  """proposal title derived from the details field"""
  title: String

  """proposal description derived from the details field"""
  description: String

  """proposal content URI derived from the details field"""
  contentURI: String

  """
  proposal Content URI type (ipfs hash, url) derived from the details field
  """
  contentURIType: String

  """votes scoped to this proposal"""
  votes(skip: Int = 0, first: Int = 100, orderBy: Vote_orderBy, orderDirection: OrderDirection, where: Vote_filter): [Vote!]
}

input Proposal_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  createdBy: Bytes
  createdBy_not: Bytes
  createdBy_in: [Bytes!]
  createdBy_not_in: [Bytes!]
  createdBy_contains: Bytes
  createdBy_not_contains: Bytes
  proposerMembership: String
  proposerMembership_not: String
  proposerMembership_gt: String
  proposerMembership_lt: String
  proposerMembership_gte: String
  proposerMembership_lte: String
  proposerMembership_in: [String!]
  proposerMembership_not_in: [String!]
  proposerMembership_contains: String
  proposerMembership_contains_nocase: String
  proposerMembership_not_contains: String
  proposerMembership_not_contains_nocase: String
  proposerMembership_starts_with: String
  proposerMembership_starts_with_nocase: String
  proposerMembership_not_starts_with: String
  proposerMembership_not_starts_with_nocase: String
  proposerMembership_ends_with: String
  proposerMembership_ends_with_nocase: String
  proposerMembership_not_ends_with: String
  proposerMembership_not_ends_with_nocase: String
  proposerMembership_: Member_filter
  dao: String
  dao_not: String
  dao_gt: String
  dao_lt: String
  dao_gte: String
  dao_lte: String
  dao_in: [String!]
  dao_not_in: [String!]
  dao_contains: String
  dao_contains_nocase: String
  dao_not_contains: String
  dao_not_contains_nocase: String
  dao_starts_with: String
  dao_starts_with_nocase: String
  dao_not_starts_with: String
  dao_not_starts_with_nocase: String
  dao_ends_with: String
  dao_ends_with_nocase: String
  dao_not_ends_with: String
  dao_not_ends_with_nocase: String
  dao_: Dao_filter
  proposalId: BigInt
  proposalId_not: BigInt
  proposalId_gt: BigInt
  proposalId_lt: BigInt
  proposalId_gte: BigInt
  proposalId_lte: BigInt
  proposalId_in: [BigInt!]
  proposalId_not_in: [BigInt!]
  prevProposalId: BigInt
  prevProposalId_not: BigInt
  prevProposalId_gt: BigInt
  prevProposalId_lt: BigInt
  prevProposalId_gte: BigInt
  prevProposalId_lte: BigInt
  prevProposalId_in: [BigInt!]
  prevProposalId_not_in: [BigInt!]
  txHash: Bytes
  txHash_not: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  proposalDataHash: Bytes
  proposalDataHash_not: Bytes
  proposalDataHash_in: [Bytes!]
  proposalDataHash_not_in: [Bytes!]
  proposalDataHash_contains: Bytes
  proposalDataHash_not_contains: Bytes
  proposalData: Bytes
  proposalData_not: Bytes
  proposalData_in: [Bytes!]
  proposalData_not_in: [Bytes!]
  proposalData_contains: Bytes
  proposalData_not_contains: Bytes
  votingPeriod: BigInt
  votingPeriod_not: BigInt
  votingPeriod_gt: BigInt
  votingPeriod_lt: BigInt
  votingPeriod_gte: BigInt
  votingPeriod_lte: BigInt
  votingPeriod_in: [BigInt!]
  votingPeriod_not_in: [BigInt!]
  votingStarts: BigInt
  votingStarts_not: BigInt
  votingStarts_gt: BigInt
  votingStarts_lt: BigInt
  votingStarts_gte: BigInt
  votingStarts_lte: BigInt
  votingStarts_in: [BigInt!]
  votingStarts_not_in: [BigInt!]
  votingEnds: BigInt
  votingEnds_not: BigInt
  votingEnds_gt: BigInt
  votingEnds_lt: BigInt
  votingEnds_gte: BigInt
  votingEnds_lte: BigInt
  votingEnds_in: [BigInt!]
  votingEnds_not_in: [BigInt!]
  gracePeriod: BigInt
  gracePeriod_not: BigInt
  gracePeriod_gt: BigInt
  gracePeriod_lt: BigInt
  gracePeriod_gte: BigInt
  gracePeriod_lte: BigInt
  gracePeriod_in: [BigInt!]
  gracePeriod_not_in: [BigInt!]
  votingPlusGraceDuration: BigInt
  votingPlusGraceDuration_not: BigInt
  votingPlusGraceDuration_gt: BigInt
  votingPlusGraceDuration_lt: BigInt
  votingPlusGraceDuration_gte: BigInt
  votingPlusGraceDuration_lte: BigInt
  votingPlusGraceDuration_in: [BigInt!]
  votingPlusGraceDuration_not_in: [BigInt!]
  graceEnds: BigInt
  graceEnds_not: BigInt
  graceEnds_gt: BigInt
  graceEnds_lt: BigInt
  graceEnds_gte: BigInt
  graceEnds_lte: BigInt
  graceEnds_in: [BigInt!]
  graceEnds_not_in: [BigInt!]
  expiration: BigInt
  expiration_not: BigInt
  expiration_gt: BigInt
  expiration_lt: BigInt
  expiration_gte: BigInt
  expiration_lte: BigInt
  expiration_in: [BigInt!]
  expiration_not_in: [BigInt!]
  expirationQueryField: BigInt
  expirationQueryField_not: BigInt
  expirationQueryField_gt: BigInt
  expirationQueryField_lt: BigInt
  expirationQueryField_gte: BigInt
  expirationQueryField_lte: BigInt
  expirationQueryField_in: [BigInt!]
  expirationQueryField_not_in: [BigInt!]
  actionGasEstimate: BigInt
  actionGasEstimate_not: BigInt
  actionGasEstimate_gt: BigInt
  actionGasEstimate_lt: BigInt
  actionGasEstimate_gte: BigInt
  actionGasEstimate_lte: BigInt
  actionGasEstimate_in: [BigInt!]
  actionGasEstimate_not_in: [BigInt!]
  details: String
  details_not: String
  details_gt: String
  details_lt: String
  details_gte: String
  details_lte: String
  details_in: [String!]
  details_not_in: [String!]
  details_contains: String
  details_contains_nocase: String
  details_not_contains: String
  details_not_contains_nocase: String
  details_starts_with: String
  details_starts_with_nocase: String
  details_not_starts_with: String
  details_not_starts_with_nocase: String
  details_ends_with: String
  details_ends_with_nocase: String
  details_not_ends_with: String
  details_not_ends_with_nocase: String
  selfSponsor: Boolean
  selfSponsor_not: Boolean
  selfSponsor_in: [Boolean!]
  selfSponsor_not_in: [Boolean!]
  sponsored: Boolean
  sponsored_not: Boolean
  sponsored_in: [Boolean!]
  sponsored_not_in: [Boolean!]
  sponsor: Bytes
  sponsor_not: Bytes
  sponsor_in: [Bytes!]
  sponsor_not_in: [Bytes!]
  sponsor_contains: Bytes
  sponsor_not_contains: Bytes
  sponsorMembership: String
  sponsorMembership_not: String
  sponsorMembership_gt: String
  sponsorMembership_lt: String
  sponsorMembership_gte: String
  sponsorMembership_lte: String
  sponsorMembership_in: [String!]
  sponsorMembership_not_in: [String!]
  sponsorMembership_contains: String
  sponsorMembership_contains_nocase: String
  sponsorMembership_not_contains: String
  sponsorMembership_not_contains_nocase: String
  sponsorMembership_starts_with: String
  sponsorMembership_starts_with_nocase: String
  sponsorMembership_not_starts_with: String
  sponsorMembership_not_starts_with_nocase: String
  sponsorMembership_ends_with: String
  sponsorMembership_ends_with_nocase: String
  sponsorMembership_not_ends_with: String
  sponsorMembership_not_ends_with_nocase: String
  sponsorMembership_: Member_filter
  sponsorTxHash: Bytes
  sponsorTxHash_not: Bytes
  sponsorTxHash_in: [Bytes!]
  sponsorTxHash_not_in: [Bytes!]
  sponsorTxHash_contains: Bytes
  sponsorTxHash_not_contains: Bytes
  sponsorTxAt: BigInt
  sponsorTxAt_not: BigInt
  sponsorTxAt_gt: BigInt
  sponsorTxAt_lt: BigInt
  sponsorTxAt_gte: BigInt
  sponsorTxAt_lte: BigInt
  sponsorTxAt_in: [BigInt!]
  sponsorTxAt_not_in: [BigInt!]
  cancelled: Boolean
  cancelled_not: Boolean
  cancelled_in: [Boolean!]
  cancelled_not_in: [Boolean!]
  cancelledTxHash: Bytes
  cancelledTxHash_not: Bytes
  cancelledTxHash_in: [Bytes!]
  cancelledTxHash_not_in: [Bytes!]
  cancelledTxHash_contains: Bytes
  cancelledTxHash_not_contains: Bytes
  cancelledTxAt: BigInt
  cancelledTxAt_not: BigInt
  cancelledTxAt_gt: BigInt
  cancelledTxAt_lt: BigInt
  cancelledTxAt_gte: BigInt
  cancelledTxAt_lte: BigInt
  cancelledTxAt_in: [BigInt!]
  cancelledTxAt_not_in: [BigInt!]
  cancelledBy: Bytes
  cancelledBy_not: Bytes
  cancelledBy_in: [Bytes!]
  cancelledBy_not_in: [Bytes!]
  cancelledBy_contains: Bytes
  cancelledBy_not_contains: Bytes
  processed: Boolean
  processed_not: Boolean
  processed_in: [Boolean!]
  processed_not_in: [Boolean!]
  processTxHash: Bytes
  processTxHash_not: Bytes
  processTxHash_in: [Bytes!]
  processTxHash_not_in: [Bytes!]
  processTxHash_contains: Bytes
  processTxHash_not_contains: Bytes
  processTxAt: BigInt
  processTxAt_not: BigInt
  processTxAt_gt: BigInt
  processTxAt_lt: BigInt
  processTxAt_gte: BigInt
  processTxAt_lte: BigInt
  processTxAt_in: [BigInt!]
  processTxAt_not_in: [BigInt!]
  processedBy: Bytes
  processedBy_not: Bytes
  processedBy_in: [Bytes!]
  processedBy_not_in: [Bytes!]
  processedBy_contains: Bytes
  processedBy_not_contains: Bytes
  actionFailed: Boolean
  actionFailed_not: Boolean
  actionFailed_in: [Boolean!]
  actionFailed_not_in: [Boolean!]
  passed: Boolean
  passed_not: Boolean
  passed_in: [Boolean!]
  passed_not_in: [Boolean!]
  proposalOffering: BigInt
  proposalOffering_not: BigInt
  proposalOffering_gt: BigInt
  proposalOffering_lt: BigInt
  proposalOffering_gte: BigInt
  proposalOffering_lte: BigInt
  proposalOffering_in: [BigInt!]
  proposalOffering_not_in: [BigInt!]
  yesVotes: BigInt
  yesVotes_not: BigInt
  yesVotes_gt: BigInt
  yesVotes_lt: BigInt
  yesVotes_gte: BigInt
  yesVotes_lte: BigInt
  yesVotes_in: [BigInt!]
  yesVotes_not_in: [BigInt!]
  noVotes: BigInt
  noVotes_not: BigInt
  noVotes_gt: BigInt
  noVotes_lt: BigInt
  noVotes_gte: BigInt
  noVotes_lte: BigInt
  noVotes_in: [BigInt!]
  noVotes_not_in: [BigInt!]
  yesBalance: BigInt
  yesBalance_not: BigInt
  yesBalance_gt: BigInt
  yesBalance_lt: BigInt
  yesBalance_gte: BigInt
  yesBalance_lte: BigInt
  yesBalance_in: [BigInt!]
  yesBalance_not_in: [BigInt!]
  noBalance: BigInt
  noBalance_not: BigInt
  noBalance_gt: BigInt
  noBalance_lt: BigInt
  noBalance_gte: BigInt
  noBalance_lte: BigInt
  noBalance_in: [BigInt!]
  noBalance_not_in: [BigInt!]
  currentlyPassing: Boolean
  currentlyPassing_not: Boolean
  currentlyPassing_in: [Boolean!]
  currentlyPassing_not_in: [Boolean!]
  maxTotalSharesAndLootAtYesVote: BigInt
  maxTotalSharesAndLootAtYesVote_not: BigInt
  maxTotalSharesAndLootAtYesVote_gt: BigInt
  maxTotalSharesAndLootAtYesVote_lt: BigInt
  maxTotalSharesAndLootAtYesVote_gte: BigInt
  maxTotalSharesAndLootAtYesVote_lte: BigInt
  maxTotalSharesAndLootAtYesVote_in: [BigInt!]
  maxTotalSharesAndLootAtYesVote_not_in: [BigInt!]
  tributeToken: Bytes
  tributeToken_not: Bytes
  tributeToken_in: [Bytes!]
  tributeToken_not_in: [Bytes!]
  tributeToken_contains: Bytes
  tributeToken_not_contains: Bytes
  tributeOffered: BigInt
  tributeOffered_not: BigInt
  tributeOffered_gt: BigInt
  tributeOffered_lt: BigInt
  tributeOffered_gte: BigInt
  tributeOffered_lte: BigInt
  tributeOffered_in: [BigInt!]
  tributeOffered_not_in: [BigInt!]
  tributeTokenSymbol: String
  tributeTokenSymbol_not: String
  tributeTokenSymbol_gt: String
  tributeTokenSymbol_lt: String
  tributeTokenSymbol_gte: String
  tributeTokenSymbol_lte: String
  tributeTokenSymbol_in: [String!]
  tributeTokenSymbol_not_in: [String!]
  tributeTokenSymbol_contains: String
  tributeTokenSymbol_contains_nocase: String
  tributeTokenSymbol_not_contains: String
  tributeTokenSymbol_not_contains_nocase: String
  tributeTokenSymbol_starts_with: String
  tributeTokenSymbol_starts_with_nocase: String
  tributeTokenSymbol_not_starts_with: String
  tributeTokenSymbol_not_starts_with_nocase: String
  tributeTokenSymbol_ends_with: String
  tributeTokenSymbol_ends_with_nocase: String
  tributeTokenSymbol_not_ends_with: String
  tributeTokenSymbol_not_ends_with_nocase: String
  tributeTokenDecimals: BigInt
  tributeTokenDecimals_not: BigInt
  tributeTokenDecimals_gt: BigInt
  tributeTokenDecimals_lt: BigInt
  tributeTokenDecimals_gte: BigInt
  tributeTokenDecimals_lte: BigInt
  tributeTokenDecimals_in: [BigInt!]
  tributeTokenDecimals_not_in: [BigInt!]
  tributeEscrowRecipient: Bytes
  tributeEscrowRecipient_not: Bytes
  tributeEscrowRecipient_in: [Bytes!]
  tributeEscrowRecipient_not_in: [Bytes!]
  tributeEscrowRecipient_contains: Bytes
  tributeEscrowRecipient_not_contains: Bytes
  proposalType: String
  proposalType_not: String
  proposalType_gt: String
  proposalType_lt: String
  proposalType_gte: String
  proposalType_lte: String
  proposalType_in: [String!]
  proposalType_not_in: [String!]
  proposalType_contains: String
  proposalType_contains_nocase: String
  proposalType_not_contains: String
  proposalType_not_contains_nocase: String
  proposalType_starts_with: String
  proposalType_starts_with_nocase: String
  proposalType_not_starts_with: String
  proposalType_not_starts_with_nocase: String
  proposalType_ends_with: String
  proposalType_ends_with_nocase: String
  proposalType_not_ends_with: String
  proposalType_not_ends_with_nocase: String
  title: String
  title_not: String
  title_gt: String
  title_lt: String
  title_gte: String
  title_lte: String
  title_in: [String!]
  title_not_in: [String!]
  title_contains: String
  title_contains_nocase: String
  title_not_contains: String
  title_not_contains_nocase: String
  title_starts_with: String
  title_starts_with_nocase: String
  title_not_starts_with: String
  title_not_starts_with_nocase: String
  title_ends_with: String
  title_ends_with_nocase: String
  title_not_ends_with: String
  title_not_ends_with_nocase: String
  description: String
  description_not: String
  description_gt: String
  description_lt: String
  description_gte: String
  description_lte: String
  description_in: [String!]
  description_not_in: [String!]
  description_contains: String
  description_contains_nocase: String
  description_not_contains: String
  description_not_contains_nocase: String
  description_starts_with: String
  description_starts_with_nocase: String
  description_not_starts_with: String
  description_not_starts_with_nocase: String
  description_ends_with: String
  description_ends_with_nocase: String
  description_not_ends_with: String
  description_not_ends_with_nocase: String
  contentURI: String
  contentURI_not: String
  contentURI_gt: String
  contentURI_lt: String
  contentURI_gte: String
  contentURI_lte: String
  contentURI_in: [String!]
  contentURI_not_in: [String!]
  contentURI_contains: String
  contentURI_contains_nocase: String
  contentURI_not_contains: String
  contentURI_not_contains_nocase: String
  contentURI_starts_with: String
  contentURI_starts_with_nocase: String
  contentURI_not_starts_with: String
  contentURI_not_starts_with_nocase: String
  contentURI_ends_with: String
  contentURI_ends_with_nocase: String
  contentURI_not_ends_with: String
  contentURI_not_ends_with_nocase: String
  contentURIType: String
  contentURIType_not: String
  contentURIType_gt: String
  contentURIType_lt: String
  contentURIType_gte: String
  contentURIType_lte: String
  contentURIType_in: [String!]
  contentURIType_not_in: [String!]
  contentURIType_contains: String
  contentURIType_contains_nocase: String
  contentURIType_not_contains: String
  contentURIType_not_contains_nocase: String
  contentURIType_starts_with: String
  contentURIType_starts_with_nocase: String
  contentURIType_not_starts_with: String
  contentURIType_not_starts_with_nocase: String
  contentURIType_ends_with: String
  contentURIType_ends_with_nocase: String
  contentURIType_not_ends_with: String
  contentURIType_not_ends_with_nocase: String
  votes_: Vote_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Proposal_orderBy {
  id
  createdAt
  createdBy
  proposerMembership
  dao
  proposalId
  prevProposalId
  txHash
  proposalDataHash
  proposalData
  votingPeriod
  votingStarts
  votingEnds
  gracePeriod
  votingPlusGraceDuration
  graceEnds
  expiration
  expirationQueryField
  actionGasEstimate
  details
  selfSponsor
  sponsored
  sponsor
  sponsorMembership
  sponsorTxHash
  sponsorTxAt
  cancelled
  cancelledTxHash
  cancelledTxAt
  cancelledBy
  processed
  processTxHash
  processTxAt
  processedBy
  actionFailed
  passed
  proposalOffering
  yesVotes
  noVotes
  yesBalance
  noBalance
  currentlyPassing
  maxTotalSharesAndLootAtYesVote
  tributeToken
  tributeOffered
  tributeTokenSymbol
  tributeTokenDecimals
  tributeEscrowRecipient
  proposalType
  title
  description
  contentURI
  contentURIType
  votes
}

type Query {
  dao(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Dao
  daos(
    skip: Int = 0
    first: Int = 100
    orderBy: Dao_orderBy
    orderDirection: OrderDirection
    where: Dao_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Dao!]!
  proposal(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Proposal
  proposals(
    skip: Int = 0
    first: Int = 100
    orderBy: Proposal_orderBy
    orderDirection: OrderDirection
    where: Proposal_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Proposal!]!
  vote(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Vote
  votes(
    skip: Int = 0
    first: Int = 100
    orderBy: Vote_orderBy
    orderDirection: OrderDirection
    where: Vote_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Vote!]!
  record(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Record
  records(
    skip: Int = 0
    first: Int = 100
    orderBy: Record_orderBy
    orderDirection: OrderDirection
    where: Record_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Record!]!
  member(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Member
  members(
    skip: Int = 0
    first: Int = 100
    orderBy: Member_orderBy
    orderDirection: OrderDirection
    where: Member_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Member!]!
  rageQuit(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RageQuit
  rageQuits(
    skip: Int = 0
    first: Int = 100
    orderBy: RageQuit_orderBy
    orderDirection: OrderDirection
    where: RageQuit_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RageQuit!]!
  shaman(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Shaman
  shamans(
    skip: Int = 0
    first: Int = 100
    orderBy: Shaman_orderBy
    orderDirection: OrderDirection
    where: Shaman_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Shaman!]!
  eventTransaction(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): EventTransaction
  eventTransactions(
    skip: Int = 0
    first: Int = 100
    orderBy: EventTransaction_orderBy
    orderDirection: OrderDirection
    where: EventTransaction_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [EventTransaction!]!
  tokenLookup(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenLookup
  tokenLookups(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenLookup_orderBy
    orderDirection: OrderDirection
    where: TokenLookup_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenLookup!]!

  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type RageQuit {
  """unique identifier and primary key of the entity"""
  id: ID!

  """block timestamp when the member rage quit"""
  createdAt: BigInt!

  """the transaction where the RageQuit occurred"""
  txHash: Bytes!

  """related DAO"""
  dao: Dao!

  """related member"""
  member: Member!

  """address the tokens where rage quit to"""
  to: Bytes!

  """number of shares rage quit"""
  shares: BigInt!

  """number of loot rage quit"""
  loot: BigInt!

  """list of treasury token addresses requested in the rage quit"""
  tokens: [Bytes!]!
}

input RageQuit_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  txHash: Bytes
  txHash_not: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  dao: String
  dao_not: String
  dao_gt: String
  dao_lt: String
  dao_gte: String
  dao_lte: String
  dao_in: [String!]
  dao_not_in: [String!]
  dao_contains: String
  dao_contains_nocase: String
  dao_not_contains: String
  dao_not_contains_nocase: String
  dao_starts_with: String
  dao_starts_with_nocase: String
  dao_not_starts_with: String
  dao_not_starts_with_nocase: String
  dao_ends_with: String
  dao_ends_with_nocase: String
  dao_not_ends_with: String
  dao_not_ends_with_nocase: String
  dao_: Dao_filter
  member: String
  member_not: String
  member_gt: String
  member_lt: String
  member_gte: String
  member_lte: String
  member_in: [String!]
  member_not_in: [String!]
  member_contains: String
  member_contains_nocase: String
  member_not_contains: String
  member_not_contains_nocase: String
  member_starts_with: String
  member_starts_with_nocase: String
  member_not_starts_with: String
  member_not_starts_with_nocase: String
  member_ends_with: String
  member_ends_with_nocase: String
  member_not_ends_with: String
  member_not_ends_with_nocase: String
  member_: Member_filter
  to: Bytes
  to_not: Bytes
  to_in: [Bytes!]
  to_not_in: [Bytes!]
  to_contains: Bytes
  to_not_contains: Bytes
  shares: BigInt
  shares_not: BigInt
  shares_gt: BigInt
  shares_lt: BigInt
  shares_gte: BigInt
  shares_lte: BigInt
  shares_in: [BigInt!]
  shares_not_in: [BigInt!]
  loot: BigInt
  loot_not: BigInt
  loot_gt: BigInt
  loot_lt: BigInt
  loot_gte: BigInt
  loot_lte: BigInt
  loot_in: [BigInt!]
  loot_not_in: [BigInt!]
  tokens: [Bytes!]
  tokens_not: [Bytes!]
  tokens_contains: [Bytes!]
  tokens_contains_nocase: [Bytes!]
  tokens_not_contains: [Bytes!]
  tokens_not_contains_nocase: [Bytes!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum RageQuit_orderBy {
  id
  createdAt
  txHash
  dao
  member
  to
  shares
  loot
  tokens
}

type Record {
  id: ID!
  createdAt: BigInt!
  createdBy: Bytes!
  dao: Dao!
  tag: Bytes!
  table: String!
  contentType: String!
  content: String!
}

input Record_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  createdBy: Bytes
  createdBy_not: Bytes
  createdBy_in: [Bytes!]
  createdBy_not_in: [Bytes!]
  createdBy_contains: Bytes
  createdBy_not_contains: Bytes
  dao: String
  dao_not: String
  dao_gt: String
  dao_lt: String
  dao_gte: String
  dao_lte: String
  dao_in: [String!]
  dao_not_in: [String!]
  dao_contains: String
  dao_contains_nocase: String
  dao_not_contains: String
  dao_not_contains_nocase: String
  dao_starts_with: String
  dao_starts_with_nocase: String
  dao_not_starts_with: String
  dao_not_starts_with_nocase: String
  dao_ends_with: String
  dao_ends_with_nocase: String
  dao_not_ends_with: String
  dao_not_ends_with_nocase: String
  dao_: Dao_filter
  tag: Bytes
  tag_not: Bytes
  tag_in: [Bytes!]
  tag_not_in: [Bytes!]
  tag_contains: Bytes
  tag_not_contains: Bytes
  table: String
  table_not: String
  table_gt: String
  table_lt: String
  table_gte: String
  table_lte: String
  table_in: [String!]
  table_not_in: [String!]
  table_contains: String
  table_contains_nocase: String
  table_not_contains: String
  table_not_contains_nocase: String
  table_starts_with: String
  table_starts_with_nocase: String
  table_not_starts_with: String
  table_not_starts_with_nocase: String
  table_ends_with: String
  table_ends_with_nocase: String
  table_not_ends_with: String
  table_not_ends_with_nocase: String
  contentType: String
  contentType_not: String
  contentType_gt: String
  contentType_lt: String
  contentType_gte: String
  contentType_lte: String
  contentType_in: [String!]
  contentType_not_in: [String!]
  contentType_contains: String
  contentType_contains_nocase: String
  contentType_not_contains: String
  contentType_not_contains_nocase: String
  contentType_starts_with: String
  contentType_starts_with_nocase: String
  contentType_not_starts_with: String
  contentType_not_starts_with_nocase: String
  contentType_ends_with: String
  contentType_ends_with_nocase: String
  contentType_not_ends_with: String
  contentType_not_ends_with_nocase: String
  content: String
  content_not: String
  content_gt: String
  content_lt: String
  content_gte: String
  content_lte: String
  content_in: [String!]
  content_not_in: [String!]
  content_contains: String
  content_contains_nocase: String
  content_not_contains: String
  content_not_contains_nocase: String
  content_starts_with: String
  content_starts_with_nocase: String
  content_not_starts_with: String
  content_not_starts_with_nocase: String
  content_ends_with: String
  content_ends_with_nocase: String
  content_not_ends_with: String
  content_not_ends_with_nocase: String

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Record_orderBy {
  id
  createdAt
  createdBy
  dao
  tag
  table
  contentType
  content
}

type Shaman {
  """unique identifier and primary key of the entity"""
  id: ID!

  """block timestamp when the shaman was added"""
  createdAt: BigInt!

  """related DAO"""
  dao: Dao!

  """address of the shaman"""
  shamanAddress: Bytes!

  """permission level of the shaman (0-7)"""
  permissions: BigInt!
}

input Shaman_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  dao: String
  dao_not: String
  dao_gt: String
  dao_lt: String
  dao_gte: String
  dao_lte: String
  dao_in: [String!]
  dao_not_in: [String!]
  dao_contains: String
  dao_contains_nocase: String
  dao_not_contains: String
  dao_not_contains_nocase: String
  dao_starts_with: String
  dao_starts_with_nocase: String
  dao_not_starts_with: String
  dao_not_starts_with_nocase: String
  dao_ends_with: String
  dao_ends_with_nocase: String
  dao_not_ends_with: String
  dao_not_ends_with_nocase: String
  dao_: Dao_filter
  shamanAddress: Bytes
  shamanAddress_not: Bytes
  shamanAddress_in: [Bytes!]
  shamanAddress_not_in: [Bytes!]
  shamanAddress_contains: Bytes
  shamanAddress_not_contains: Bytes
  permissions: BigInt
  permissions_not: BigInt
  permissions_gt: BigInt
  permissions_lt: BigInt
  permissions_gte: BigInt
  permissions_lte: BigInt
  permissions_in: [BigInt!]
  permissions_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Shaman_orderBy {
  id
  createdAt
  dao
  shamanAddress
  permissions
}

type Subscription {
  dao(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Dao
  daos(
    skip: Int = 0
    first: Int = 100
    orderBy: Dao_orderBy
    orderDirection: OrderDirection
    where: Dao_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Dao!]!
  proposal(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Proposal
  proposals(
    skip: Int = 0
    first: Int = 100
    orderBy: Proposal_orderBy
    orderDirection: OrderDirection
    where: Proposal_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Proposal!]!
  vote(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Vote
  votes(
    skip: Int = 0
    first: Int = 100
    orderBy: Vote_orderBy
    orderDirection: OrderDirection
    where: Vote_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Vote!]!
  record(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Record
  records(
    skip: Int = 0
    first: Int = 100
    orderBy: Record_orderBy
    orderDirection: OrderDirection
    where: Record_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Record!]!
  member(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Member
  members(
    skip: Int = 0
    first: Int = 100
    orderBy: Member_orderBy
    orderDirection: OrderDirection
    where: Member_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Member!]!
  rageQuit(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RageQuit
  rageQuits(
    skip: Int = 0
    first: Int = 100
    orderBy: RageQuit_orderBy
    orderDirection: OrderDirection
    where: RageQuit_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RageQuit!]!
  shaman(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Shaman
  shamans(
    skip: Int = 0
    first: Int = 100
    orderBy: Shaman_orderBy
    orderDirection: OrderDirection
    where: Shaman_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Shaman!]!
  eventTransaction(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): EventTransaction
  eventTransactions(
    skip: Int = 0
    first: Int = 100
    orderBy: EventTransaction_orderBy
    orderDirection: OrderDirection
    where: EventTransaction_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [EventTransaction!]!
  tokenLookup(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenLookup
  tokenLookups(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenLookup_orderBy
    orderDirection: OrderDirection
    where: TokenLookup_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenLookup!]!

  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type TokenLookup {
  """
  unique identifier and primary key of the entity (share or loot token address)
  """
  id: ID!

  """related DAO"""
  dao: Bytes!
}

input TokenLookup_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  dao: Bytes
  dao_not: Bytes
  dao_in: [Bytes!]
  dao_not_in: [Bytes!]
  dao_contains: Bytes
  dao_not_contains: Bytes

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum TokenLookup_orderBy {
  id
  dao
}

type Vote {
  """unique identifier and primary key of the entity"""
  id: ID!

  """transaction hash of the vote"""
  txHash: Bytes!

  """block timestamp when the vote was submitted"""
  createdAt: BigInt!

  """contract address of the DAO related to this vote"""
  daoAddress: Bytes!

  """indicates yes vote/no vote"""
  approved: Boolean!

  """shares balance of the voting member at the time of the vote"""
  balance: BigInt!

  """related proposal"""
  proposal: Proposal!

  """related/voting member"""
  member: Member!
}

input Vote_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  txHash: Bytes
  txHash_not: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  daoAddress: Bytes
  daoAddress_not: Bytes
  daoAddress_in: [Bytes!]
  daoAddress_not_in: [Bytes!]
  daoAddress_contains: Bytes
  daoAddress_not_contains: Bytes
  approved: Boolean
  approved_not: Boolean
  approved_in: [Boolean!]
  approved_not_in: [Boolean!]
  balance: BigInt
  balance_not: BigInt
  balance_gt: BigInt
  balance_lt: BigInt
  balance_gte: BigInt
  balance_lte: BigInt
  balance_in: [BigInt!]
  balance_not_in: [BigInt!]
  proposal: String
  proposal_not: String
  proposal_gt: String
  proposal_lt: String
  proposal_gte: String
  proposal_lte: String
  proposal_in: [String!]
  proposal_not_in: [String!]
  proposal_contains: String
  proposal_contains_nocase: String
  proposal_not_contains: String
  proposal_not_contains_nocase: String
  proposal_starts_with: String
  proposal_starts_with_nocase: String
  proposal_not_starts_with: String
  proposal_not_starts_with_nocase: String
  proposal_ends_with: String
  proposal_ends_with_nocase: String
  proposal_not_ends_with: String
  proposal_not_ends_with_nocase: String
  proposal_: Proposal_filter
  member: String
  member_not: String
  member_gt: String
  member_lt: String
  member_gte: String
  member_lte: String
  member_in: [String!]
  member_not_in: [String!]
  member_contains: String
  member_contains_nocase: String
  member_not_contains: String
  member_not_contains_nocase: String
  member_starts_with: String
  member_starts_with_nocase: String
  member_not_starts_with: String
  member_not_starts_with_nocase: String
  member_ends_with: String
  member_ends_with_nocase: String
  member_not_ends_with: String
  member_not_ends_with_nocase: String
  member_: Member_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Vote_orderBy {
  id
  txHash
  createdAt
  daoAddress
  approved
  balance
  proposal
  member
}

