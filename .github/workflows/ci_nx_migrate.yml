name: "Nx migrate"

on:
  schedule:
    - cron: "30 13 1 * *" # Runs Monthly on the 1st.
  workflow_dispatch: # adding the workflow_dispatch so it can be triggered manually
env:
  BASE: ${{ github.ref == 'refs/heads/develop' && 'origin/develop~1' || 'origin/develop' }}
jobs:
  nx-migrate:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: |
            **/node_modules
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - uses: actions/setup-node@v2
        with:
          node-version: 16.x
          # This doesn't just set the registry url, but also sets
          # the right configuration in .npmrc that reads NPM token
          # from NPM_AUTH_TOKEN environment variable.
          # It actually creates a .npmrc in a temporary folder
          # and sets the NPM_CONFIG_USERCONFIG environment variable.
          registry-url: https://registry.npmjs.org
      - run: npm install -g nx
      - name: Check if @nrwl/workspace is outdated
        id: nrwl-workspace-outdated
        run: |
          IS_OUTDATED=$(test ! -z "$(npm outdated @nrwl/workspace)" && echo true || echo false)
          echo $IS_OUTDATED
          echo "::set-output name=outdated::$IS_OUTDATED"

      - name: Update @nrwl/workspace
        if: steps.nrwl-workspace-outdated.outputs.outdated == 'true'
        run: echo 1 | nx migrate latest
      - name: Install dependencies
        if: steps.nrwl-workspace-outdated.outputs.outdated == 'true'
        run: yarn install --frozen-lockfile
      - name: Exit if outdated === false
        if: steps.nrwl-workspace-outdated.outputs.outdated == 'false'
        run: |
          exit 1
      - name: Check if has migrations
        id: nrwl-workspace-has-migrations
        run: |
          HAS_MIGRATIONS=$(test -f migrations.json && echo true || echo false)
          echo $HAS_MIGRATIONS
          echo "::set-output name=has_migrations::$HAS_MIGRATIONS"
      - name: Run @nrwl/workspace migrations
        if: steps.nrwl-workspace-has-migrations.outputs.has_migrations == 'true'
        run: npx nx migrate --run-migrations
      - name: Test mono
        run: NODE_OPTIONS=--experimental-vm-modules nx affected:test --base $BASE
      - name: Setup git user to "ðŸ¤– Moloch Bot"
        shell: bash
        run: git config user.email "-" && git config user.name "ðŸ¤– Moloch Bot"
      - name: Commit changes
        if: steps.nrwl-workspace-outdated.outputs.outdated == 'true'
        run: |
          git add .
          [[ $(git status --porcelain) ]] && git commit -m "build: ðŸ“¦ update nrwl workspace" || echo "nothing to commit"
      - name: Remove migrations.json & commit
        if: steps.nrwl-workspace-has-migrations.outputs.has_migrations == 'true'
        run: |
          git rm -f migrations.json
          git commit -m "build: ðŸ“¦ remove migrations.json"
      - name: Get current nx version
        id: nx-version
        run: echo "::set-output name=version::$(npm view @nrwl/workspace version)"
      - name: Push changes
        if: steps.nrwl-workspace-outdated.outputs.outdated == 'true' && steps.test.outcome == 'success'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: update-nrwl-workspace-${{ steps.nx-version.outputs.version }}
          tags: true
      - name: Create PR
        if: steps.nrwl-workspace-outdated.outputs.outdated == 'true' && steps.test.outcome != 'success'
        run: |
          LAST_VERSION=$(npm view @nrwl/workspace version)
          BRANCH="update-nrwl-workspace-${LAST_VERSION}"
          git checkout -b "${BRANCH}"
          git push -f --set-upstream origin "${BRANCH}"
          PR=$(gh pr view "${BRANCH}")
          if [[ $PR == *"no pull requests found"* ]]; then
            gh pr create \
              --repo HausDAO/daohaus-monorepo \
              --base "${BASE}" \
              --head "${BRANCH}" \
              --title string "Update @nrwl/workspace" \
              --body string "Update @nrwl/workspace dependencies to ${LAST_VERSION}." \
              --fill
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
