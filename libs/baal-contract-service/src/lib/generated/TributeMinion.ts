/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export interface TributeMinionInterface extends utils.Interface {
  functions: {
    'encodeTributeProposal(address,uint256,uint256,address,uint32,address)': FunctionFragment;
    'releaseEscrow(address,uint32)': FunctionFragment;
    'submitTributeProposal(address,address,uint256,uint256,uint256,uint32,string)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'encodeTributeProposal'
      | 'releaseEscrow'
      | 'submitTributeProposal'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'encodeTributeProposal',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'releaseEscrow',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'submitTributeProposal',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: 'encodeTributeProposal',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'releaseEscrow',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'submitTributeProposal',
    data: BytesLike
  ): Result;

  events: {
    'TributeProposal(address,address,uint256,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'TributeProposal'): EventFragment;
}

export interface TributeProposalEventObject {
  baal: string;
  token: string;
  amount: BigNumber;
  recipient: string;
  proposalId: BigNumber;
}
export type TributeProposalEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber],
  TributeProposalEventObject
>;

export type TributeProposalEventFilter = TypedEventFilter<TributeProposalEvent>;

export interface TributeMinion extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TributeMinionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    encodeTributeProposal(
      baal: PromiseOrValue<string>,
      shares: PromiseOrValue<BigNumberish>,
      loot: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BigNumberish>,
      escrow: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    releaseEscrow(
      _baal: PromiseOrValue<string>,
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitTributeProposal(
      baal: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      shares: PromiseOrValue<BigNumberish>,
      loot: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      details: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  encodeTributeProposal(
    baal: PromiseOrValue<string>,
    shares: PromiseOrValue<BigNumberish>,
    loot: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BigNumberish>,
    escrow: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  releaseEscrow(
    _baal: PromiseOrValue<string>,
    _proposalId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitTributeProposal(
    baal: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    shares: PromiseOrValue<BigNumberish>,
    loot: PromiseOrValue<BigNumberish>,
    expiration: PromiseOrValue<BigNumberish>,
    details: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    encodeTributeProposal(
      baal: PromiseOrValue<string>,
      shares: PromiseOrValue<BigNumberish>,
      loot: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BigNumberish>,
      escrow: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    releaseEscrow(
      _baal: PromiseOrValue<string>,
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitTributeProposal(
      baal: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      shares: PromiseOrValue<BigNumberish>,
      loot: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      details: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    'TributeProposal(address,address,uint256,address,uint256)'(
      baal?: PromiseOrValue<string> | null,
      token?: null,
      amount?: null,
      recipient?: null,
      proposalId?: null
    ): TributeProposalEventFilter;
    TributeProposal(
      baal?: PromiseOrValue<string> | null,
      token?: null,
      amount?: null,
      recipient?: null,
      proposalId?: null
    ): TributeProposalEventFilter;
  };

  estimateGas: {
    encodeTributeProposal(
      baal: PromiseOrValue<string>,
      shares: PromiseOrValue<BigNumberish>,
      loot: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BigNumberish>,
      escrow: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    releaseEscrow(
      _baal: PromiseOrValue<string>,
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitTributeProposal(
      baal: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      shares: PromiseOrValue<BigNumberish>,
      loot: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      details: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    encodeTributeProposal(
      baal: PromiseOrValue<string>,
      shares: PromiseOrValue<BigNumberish>,
      loot: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BigNumberish>,
      escrow: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    releaseEscrow(
      _baal: PromiseOrValue<string>,
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitTributeProposal(
      baal: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      shares: PromiseOrValue<BigNumberish>,
      loot: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      details: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
